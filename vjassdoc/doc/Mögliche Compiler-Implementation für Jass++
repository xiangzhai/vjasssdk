Möglich Kapitelunterteilung einer Compiler-Implementation:
1. Vorwort
2. Kompilierungsschritte
	1. Validierung
	2. Der Präprozessor (#if-Überprüfungen - benötigen konstante Ausdrücke, Dateiimporte, Injections)
	3. Kommentar-Entfernung
	4. Paketsortierung
	5. Anweisungsgenerierung (Typenkonvertierungen, Variableninitialisierungen, Funktionsaufrufe usw.)
	6. Verzweigungsgenerierung
	7. Schleifengenerierung
	8. Ausnahmebehandlungsgenerierung
	9. Finally-Generierung
	10. Funktionsgenerierung (auch Lambda-Funktionen, Funktionsauslöser für "threaded"-Funktionen usw.)
	11. Vorlagengenerierung
	12. Aufzählungsgenerierung
	13. Klassengenerierung
	14. InitJassPP-Generierung (exakt nach dem Aufruf der Funktion InitBlizzard in der main-Funktion des Kartenskripts)
	15. Initialisierungsfunktionsaufrufgenerierung (exakt vor dem Aufruf der Funktion RunInitializationTriggers in der main-Funktion des Kartenskripts)
	
3. Generierte Variablen
4. Die globale Hashtable

1. Vorwort

Es gibt zwei verschiedene Arten der Umgehung gewisser Limits von Jass bzw. der Implementation bestimmter Fähigkeiten von Jass++.
Zum Einen kann dies durch generierte Variablen und zum Anderen durch eine globale Hashtable erreicht werden.
In beiden Fällen werden Zugriffsfunktionen erzeugt, welche bei den entsprechenden Zugriffen bzw. Aufrufen der Funktionen
mit diesen ersetzt werden und eventuell noch entsprechender Code, wie z. B. die Setzung bestimmter globaler Variablen, hinzugefügt
wird.
Die globale Hashtable ist zwar vermutlich (noch keine belegten Tests) langsamer als der Zugriff auf Array-Variablen, jedoch muss
die Zugriffsfunktion je nach höhe des Indexes länger die entsprechende globale Variable auswählen bzw. werden mehrere globale Variablen
erzeugt, Platz bleibt eventuell ungenutzt, da jedes Array in Warcraft 3 The Frozen Throne eine fixe Größe besitzt, und es entsteht wesentlich
mehr Code im generierten Kartenskript.
Bei einer globalen Hashtable ist es dagegen möglich nahezu beliebig viele Daten zu speichert, ohne besondere neue Variablen zu generieren.
Es fallen sogar eigens deklarierte Variablen weg, da ihre Daten in der Hashtable gespeichert werden.


!!!!!!!!!!!!!!!!!Veraltete Definitionen!!!!!!!!!!:

8. Globale Hashtable erzeugen/Laufzeitglobale erzeugen

8.1 Globale Hashtable
Ist der Hashtable-Modus aktiviert, so wird eine globale Variable namens __hashtable des Typs hashtable in das Kartenskript
eingefügt.
Die globale Hashtable wird für Funktionsparameter von .executewait-, .execute- und .evaluate-Aufrufen, Klasseninstanzen und Arrayinstanzen verwendet.
Sie wird in der main-Funktion der Karte nach dem Aufruf der InitBlizzard-Funktion in der Funktion InitJassPP erzeugt.
Nach ihr werden sämtliche Prototypauslöser erzeugt.

Kategorie "Data":
	* Label "FunctionPrototypes" Typ integer Wert <Anzahl der Funktionsprototypen> // Eventuell nur im Debug-Modus, wird zur Laufzeit normalerweise nicht benötigt.
	* Label "ClassInstances" Typ integer Wert <Anzahl der Klasseninstanzen>
	* Label "ArrayInstances" Typ integer Wert <Anzahl der Array-Instanzen>

// TODO: globale Array-Variable mit Auslösern?
Kategorie "FunctionPrototype<n>":
	* Label "Trigger" Typ trigger Wert <Zugehöriger Auslöser>
	* Label "Argument<n>" Typ <Argument<n>-Typ der Funktion> Wert <Argument<n>-Wert gesetzt durch den letzten Aufruf>

Kategorie "ClassInstance<n>":
	* Label "MethodFunctionPrototype<Name der virtuellen Methoden>" Typ integer Wert <Nummer des Funktionsprototypes der virtuellen Methode>
	* Label "Member<Elementname>" Typ <Elementtyp> Wert <Elementwert>

Kategorie "ArrayInstance<n>":
	* Label "Index<Index>" Typ <Arraytyp> Wert <Arraywert des Indexes>

Wurden bei einer Klasse oder einem Array Maximalgrößen angegeben, so werden diese innerhalb der generierten Zugriffsfunktionen (siehe 10.1 Zugriffsfunktionen für globale Hashtable)
überprüft und entsprechend verfahren, wenn das Maximum erreicht wurde.

8.2 Laufzeitglobale
1. sämtliche Prototypfunktionsauslöser-, Prototypfunktionsargument- und Prototypfunktionsrückgabewert-Globalen ins Kartenskript einfügen
2. sämtliche 

13. InitJassPP generieren
Falls der Hashtable-Modus aktiviert ist, Klassen mit Maximalgrößen über JASS_MAX_ARRAY_SIZE, Arrays mit Maximalgrößen über
JASS_MAX_ARRAY_SIZE oder irgendeine Art von Funktionsprototyp existiert (durch "virtual" bzw. "threaded" Methoden/Funktionen),
wird die Funktion InitJassPP generiert, in welcher entweder die Hashtable erzeugt und gefüllt wird oder alle Prototypfunktionsauslöser in globale Variablen geschrieben werden.
Die Funktion wird nach der Funktion InitBlizzard in der Funktion main des Kartenskripts aufgerufen.

10. Zugriffsfunktionen generieren


10.1 Zugriffsfunktionen für globale Hashtable


10.2 Zugriffsfunktionen für Laufzeitglobale
Threaded Funktionen/Funktionsprototypen:
Pro "threaded" Funktion bzw. Methode wird ein globaler Auslöser erzeugt, der den Funktionsinhalt
enthält, allerdings keine Parameter entgegen nimmt. Die Parameter werden in lokale Variablen aus
globalen Parametervariablengeladen bzw. vor dem
Aufruf gesetzt.
Die Prototypauslöser werden in einem oder mehreren Arrays gespeichert und wie Klassenelemente indiziert,
insofern keine globale Hashtable verwendet wird. Für die Prototypargumente existieren pro Argumenttyp
und der maximal benötigten Anzahl dieser in einer Funktion ebenfalls globale Variablen.
Prototypfunktionen sind statisch und werden normalerweise nicht zur Laufzeit verändert, weshalb
man keine Index-Auswertungsfunktionen braucht, da der Compiler stets die richtigen Variablen
einfügen sollte.
Achtung: Der Compiler muss beim Verwenden einer neuen globalen Variable, immer die Größe
der bereits verwendeten Arrays abziehen (siehe Klassenelementezugriff).

globals
	trigger array __prototypeFunctionTriggers0
	trigger array __prototypeFunctionTriggers1
	<Parametertyp0> array __prototypeFunctionArguments0__<Parametertyp0>
	<Parametertyp0> array __prototypeFunctionArguments1__<Parametertyp0>
	<Parametertyp1> array __prototypeFunctionArguments0__<Parametertyp1>
	<Parametertyp1> array __prototypeFunctionArguments1__<Parametertyp1>
	<Rückgabetyp0> array __prototypeFunctionReturnValues0__<Rückgabetyp0>
endglobals

function __prototypeFunction<Prototypnummer> takes nothing returns nothing
	local <Parametertyp0> <Parametername0> = __prototypeFunctionArguments0__<Parametertyp0>[<Prototypnummer>]
	local <Parametertyp1> <Parametername1> = __prototypeFunctionArguments0__<Parametertyp1>[<Prototypnummer>]
	set __prototypeFunctionReturnValues0__<Rückgabetyp0> = <Parametername0> * <Parametername1>
endfunction

// Kann auch ohne Funktion in den Code kopiert werden.
function __init__PrototypeFunction<Prototypnummer> takes nothing returns nothing
	set __prototypeFunctionTriggers0[<Prototypnummer>] = CreateTrigger()
	call TriggerAddAction(__prototypeFunctionTriggers0[<Prototypnummer>], function __prototypeFunction<Prototypnummer>)
endfunction

// Kann auch ohne Funktion in den Code kopiert werden.
// Für den Debug-Modus.
function __free__PrototypeFunction<Prototypnummer> takes nothing returns nothing
	call TriggerClearActions(__prototypeFunctionTriggers0[<Prototypnummer>])
	call DestroyTrigger(__prototypeFunctionTriggers0[<Prototypnummer>])
	set __prototypeFunctionTriggers0[<Prototypnummer>] = null
endfunction

// Kann auch ohne Funktion in den Code kopiert werden.
// Für .evaluations.
function __evaluations__prototypeFunction<Prototypnummer> takes nothing returns integer
	return GetTriggerEvalCount(__prototypeFunctionTriggers0[<Prototypnummer>])
endfunction

// Kann auch ohne Funktion in den Code kopiert werden.
// Für .executions.
function __executions__prototypeFunction<Prototypnummer> takes nothing returns integer
	return GetTriggerExecCount(__prototypeFunctionTriggers0[<Prototypnummer>])
endfunction

function testEvaluation takes nothing returns nothing
	local <Rückgabetyp0> result
	set __prototypeFunctionArguments0__<Parametertyp0>[<Prototypnummer>] = <Parameter0>
	set __prototypeFunctionArguments0__<Parametertyp1>[<Prototypnummer>] = <Parameter1>
	call TriggerEvaluate(__prototypeFunctionTriggers0[<Prototypnummer>])
	set result = __prototypeFunctionReturnValues0__<Rückgabetyp0>
endfunction

Klasseninstanzen ohne globale Hashtable:
Pro Klassenelement wird eine globale Arrayvariable deklariert deren Indexwerte der jeweiligen Instanz gehören. Außerdem wird
eine Konstante definiert, welche bestimmt, wie viele Instanzen der Klasse erzeugt werden können. Dies hängt unter anderem
davon ab, ob die Klasse Array-Elemente besitzt.
Pro virtuelle Methode wird eine globale Arrayvariable deklariert, welcher der Prototypindex bei der Instanzerzeugung zugewiesen wird.
Bei der Allokation wird in einer globalen Zählervariable nach einer freien Id gesucht und diese verwendet. 0 zählt dabei als leerer Wert.
Kindklassen erhalten KEINE eigene Zählervariable, da ansonsten das Konzept der virtuellen Methoden nicht funktioniert und nicht auf die Elemente
der Elternklasse zugegriffen werden könnte, ohne diese neu zu deklarieren.
Wird keine globale Hashtable verwendet, so wird je nach Größe pro 8192-Block + 1 (das erste Element ist das 0-Element, welches
für einen nichtallozierten Zeiger reserviert ist) eine globale Array-Variable für jedes Element und jede virtuelle Methode erzeugt.
Außerdem werden Zugriffsfunktionen für die virtuellen Methoden und Elemente
generiert, welche bei Zugriffen anstatt eines normalen Zugriffs verwendet werden (automatische Ersetzung):
globals
	constant integer __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size
	boolean array __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>0
	boolean array __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>1
	<Elementtyp> array __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__<Elementname>0
	<Elementtyp> array __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__<Elementname>1
	integer array __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__<Methodenname>0
	integer array __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__<Methodenname>1
endglobals

Allokation:

// fixen, 0-Zeiger beachten!
function __newparent__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname> takes nothing returns integer
	local integer i = 0
	loop
		exitwhen (i == IMax(1, __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size / JASS_MAX_ARRAY_SIZE))
		set j = 1 // 0 ist reserviert für den Null-Zeiger
		loop
			exitwhen (j == IMin(__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size, JASS_MAX_ARRAY_SIZE) + 1)
			if (i == 0) then // Benutze Array-Variable 0
				if (not __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>[j]) then
					set __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>0[j] = true
					return i * j
				endif
			elseif (i == 1) then // Benutze Array-Variable 1
				if (not __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>[j]) then
					set __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>1[j] = true
					return i * j
				endif
			endif
			set j = j + 1
		endloop
		set i = i + 1
	endloop
#if (DEBUG_MODE)
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0.0, 0.0, 1000.0, "Unable to allocate id for an instance of class \"<Paketnamen getrennt durch Punkte><Klassenname>\". Maximum size is " + I2S(__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size) + ".")
#endif
	return 0
endfunction

// Eventuell Variable automatisch auf 0 setzen?
function __deleteparent__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname> takes integer id returns nothing
#if (DEBUG_MODE)
	if (id <= 0 or id >= __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0.0, 0.0, 1000.0, "Unable to free id " + I2S(id) + " for an instance of class \"<Paketnamen getrennt durch Punkte><Klassenname>\". Maximum size is " + I2S(__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size) + ".")
		return
	endif
#endif
	if (id < JASS_MAX_ARRAY_SIZE) then // Benutze Array-Variable 0
		set __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>0[id] = false
	elseif (id < 2 * JASS_MAX_ARRAY_SIZE) then // Benutze Array-Variable 1
		set __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>1[id] = false
	endif
endfunction

// Die Elementzugriffsfunktionen gelten ebenso für virtuelle Methoden

function __setMember__<Elementname>__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname> takes integer id, <Elementtyp> value returns nothing
#if (DEBUG_MODE)
	if (id < 0 or __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0.0, 0.0, 1000.0, "Unable to set member <Elementname> of type <Elementtyp> for instance " + I2S(id) + " of class \"<Paketnamen getrennt durch Punkte><Klassenname>\". Maximum size is " + I2S(__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size) + ".")		
		return
	endif
#endif
	if (id < JASS_MAX_ARRAY_SIZE) then // Benutze Array-Variable 0
		set __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__<Elementname>0[id] = value
	elseif (id < 2 * JASS_MAX_ARRAY_SIZE) then // Benutze Array-Variable 1
		set __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__<Elementname>1[id] = value
	endif
endfunction

function __member__<Elementname>__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname> takes integer id returns <Elementtyp>
#if (DEBUG_MODE)
	if (id < 0 or __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0.0, 0.0, 1000.0, "Unable to get member <Elementname> of type <Elementtyp> for instance " + I2S(id) + " of class \"<Paketnamen getrennt durch Punkte><Klassenname>\". Maximum size is " + I2S(__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size) + ".")		
		return <Elementtypnullwert>
	endif
#endif
	if (id < JASS_MAX_ARRAY_SIZE) then // Benutze Array-Variable 0
		return __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__<Elementname>0[id]
	elseif (id < 2 * JASS_MAX_ARRAY_SIZE) then // Benutze Array-Variable 1
		return __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__<Elementname>1[id]
	endif
	return <Elementtypnullwert>
endfunction

// Existiert auch für Kindklassen.
function __initMembers__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname> takes integer id returns nothing
	call __setMember__<Elementname>__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>(id, <Startwert>)
endfunction

// Existiert auch für Kindklassen.
function __initVirtualMethods__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname> takes integer id returns nothing
	call __setMember__<Elementname>__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>(id, <Funktionsprototyp-Id der virtuellen Methode>)
endfunction

// Existiert auch für Kindklassen.
function __resetMembers__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname> takes integer id returns nothing
	call __setMember__<Elementname>__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>(id, <Nullwert>)
endfunction

// Existiert auch für Kindklassen.
function __resetVirtualMethods__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname> takes integer id returns nothing
	call __setMember__<Elementname>__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>(id, 0)
endfunction

// Existiert auch für Kindklassen.
function __new__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname> takes nothing returns integer
	local integer id = __newparent__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>()
#if (DEBUG_MODE)
	if (id == 0) then
		return
	endif
#endif
	call __initMembers__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>(id) // Falls Elemente vorhanden.
	call __initVirtualMethods__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>(id) // Falls virtuelle Methoden vorhanden.
endfunction

// Existiert auch für Kindklassen. Eventuell Variable automatisch auf 0 setzen?
function __delete__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname> takes integer id returns nothing
	call __deleteparent__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>(id)
#if (DEBUG_MODE)
	if (id <= 0 or id >= __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0.0, 0.0, 1000.0, "Unable to free id " + I2S(id) + " for an instance of class \"<Paketnamen getrennt durch Punkte><Klassenname>\". Maximum size is " + I2S(__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__size) + ".")
		return
	endif
#endif
	call __resetMembers__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>(id) // Falls Elemente vorhanden.
	call __resetVirtualMethods__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>(id) // Falls virtuelle Methoden vorhanden.
endfunction

Methoden:
Methoden werden wie Funktionen nach ihren unterschiedlichen Parametern in Bezeichner durchnummeriert.

boolean test(integer a, integer b)
{
	return a + b + this.m_x;
}

wird ersetzt durch

function __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__test0 takes integer this, integer a, integer b returns boolean
	return a + b + __member__m_x__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>(this)
endfunction

/*
Threaded Methoden:

threaded void test(integer a, integer b)
{
}

wird ersetzt durch

function __FunctionPrototype<n> takes nothing returns nothing
	local integer this = LoadInteger(__hashtable, StringHash("FunctionPrototype<n>"), StringHash("this"))
	local integer a = LoadInteger(__hashtable, StringHash("FunctionPrototype<n>"), StringHash("a"))
	local integer b = LoadInteger(__hashtable, StringHash("FunctionPrototype<n>"), StringHash("b"))
endfunction

und in der Initialisierungsfunktion mit folgendem initialisiert

local trigger prototypeTrigger = CreateTrigger()
call TriggerAddAction(prototypeTrigger, function __<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__test)
SaveTriggerHandle(__hashtable, StringHash("FunctionPrototype<n>"), StringHash("Trigger"), prototypeTrigger)
set prototypeTrigger = null

this.myVirtualMethod().execute(a, b)

wird ersetzt durch

call SaveInteger(__hashtable, StringHash("FunctionPrototype" + I2S(__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__<Methodenname>[this])), StringHash("this"), this)
call SaveInteger(__hashtable, StringHash("FunctionPrototype" + I2S(__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__<Methodenname>[this])), StringHash("Argument0"), a)
call SaveInteger(__hashtable, StringHash("FunctionPrototype" + I2S(__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__<Methodenname>[this])), StringHash("Argument1"), b)
call TriggerExecute(LoadTriggerHandle(__hashtable, StringHash("FunctionPrototype" + I2S(__<Paketnamen getrennt durch doppelte Unterstriche>__<Klassenname>__<Methodenname>[this]))), StringHash("Trigger"))
*/

10.3 Zugriffsfunktionen für Funktionen/Methoden mit gleichem Namen

11. Funktionen generieren
Jass-Funktionen, die zwischen den Präprozessoranweisungen #jass und #endjass deklariert wurden,
werden vor sämtlichen in Jass++-Paketen enthaltenen Funktionen in das Kartenskript geschrieben.
Daher sind sie aus Jass++ allesamt verwendbar. Dabei werden sie in der Einlesereihenfolge des Parsers
gelassen.

Ersetzung von threaded Funktionsaufrufen:
Neu schreiben

Aufruf von init Funktionen:
"init"-Funktionen besitzen keine Argumente. Sie werden automatisch vor dem Aufruf der Funktion RunInitializationTriggers aufgerufen.
Dies geschieht normalerweise in unbestimmter Reihenfolge (je nachdem, welche der Compiler zu erst findet und wie er sie sortiert).
Besitzt eine "init"-Funktion einen Rückgabetyp oder wird manuell von einem anderen Punkt aus aufgerufen, so sollte eine Warnung ausgegeben werden.

Präprozessoren:


Methoden:
Da alle Methoden virtuell sind, muss schon beim Kompilieren (anhand der Typenumwandlungen) festgestellt werden, welchen Typ die Variable momentan hat
und anhand des Typs die richtige Methode aufgerufen werden.

15. Verzweigungen
Die switch-Verzweigung wird folgendermaßen ersetzt:

Code:
integer a = 10;
switch (a)
{
	case 0,10
	{
		break;
	}

	case 100
	{
	}

	case 1000
	{
		break;
	}

	default
	{
		break;
	}
}

Generierter Code:
local integer a = 10
if (a == 0 or a == 10) then
	// Anweisungen aus case 0,10 bis break;
elseif (a == 100) then
	// Anweisungen aus case 100
	// Anweisungen aus case 1000 bis break;
elseif (a == 1000) then
	// Anweisungen aus case 1000
else
	// Aktionen aus default
endif

16. Schleifen

Code:
boolean test = false
while (test)
{
	continue;
	break;
}
case 100
{
}
default
{
}

Generierter Code:
local boolean test = false
local boolean __loopBreak0
local integer __loopCounter0
set __loopBreak0 = false
set __loopCounter0 = 0
loop
	exitwhen (not test)
	continue; ???????
	set __loopBreak0 = true // break;
	exitwhen (true) // break;
	set __loopCounter0 = __loopCounter0 + 1 // letzte Anweisung
endloop
if (__loopCounter0 == 100) then // case 100
elseif (not __loopBreak0) then // default
endif

Anmerkungen:
Pro Schleife in einer Funktion, welche eine default-Verzweigung verwendet, wird eine Variable namens __loopBreak<n> des Types boolean am Anfang
der Funktion deklariert und vor dem Schleifenblock auf false gesetzt.
Diese wird bei einer break-Anweisung auf true gesetzt.
Pro Schleife in einer Funktion, welche eine case-Verzweigung verwendet, wird eine Variable namens __loopCounter<n> des Typs integer am Anfang 
der Funktion deklariert und vor dem Schleifenblock genullt.
Diese wird nach jedem Schleifendurchlauf erhöht (auch continue?).

Code:
do
{
	break;
}
while (false);
default
{
}

Generierter Code:
local boolean __loopBreak0
set __loopBreak0 = false
loop
	set __loopBreak0 = true
	exitwhen (true)
endloop
if (not __loopBreak0) then
endif

Code:
integer i;
for (i = 0; i < 100; i++)
{
	break;
}
case 10
{
}
default
{
}

Generierter Code:
local integer i
local boolean __loopBreak0
local integer __loopCounter0
set __loopBreak0 = false
set __loopCounter0 = 0
set i = 0 // i = 0
loop
exitwhen (i >= 100) // i < 100
	set __loopBreak0 = true // break;
	exitwhen (true) // break;
	set __loopCounter0 = __loopCounter0 + 1
	set i = i + 1 // i++
endloop
if (__loopCounter0 == 10) then // case 10
elseif (not __loopBreak0) then // default
endif

17. Ausnahmen

integer test(integer a, integer b) throw (integer)
{
	if (a == b)
	{
		throw 10;
	}
}

Der Compiler generiert:
globals
	integer __throwValueInteger
	boolean __thrownInteger
endglobals

function test takes integer a, integer b returns integer
	if (a == b)
		set __throwValueInteger = 10
		set __thrownInteger = true
		return 0 // Nullwert
	endif
endfunction


Aufruf:


void bla()
{
	integer x;

	try
	{
		x = test(10, 10);
	}
	catch (integer value)
	{
		Print(I2S(value));
	}
	default
	{
	}
}

Der Compiler generiert:
function bla takes nothing returns nothing
	local integer x
	local integer __tmpValueInteger0
	local integer __catchValueInteger
	set __tmpValueInteger0 = test(10, 10)
	if (__thrownInteger) then
		set __catchValueInteger = __throwValueInteger
		call Print(I2S(__catchValueInteger))
	elseif (<restliche Typen überprüfen>) then
	else // eigentliche try-Blockausführung
		set x = __tmpValue0
	endif
endfunction

Anmerkungen:
Für geworfene Ausnahmen werden pro Typ zwei globale Variable deklariert, welche einmal den Wurfwert und einmal einen booleschen Wert enthalten,
ob der Typ geworfen wurde.
In der Funktion selbst wird pro Setzung einer Variable mit einem möglichen throw-Funktionsaufruf eine temporäre Variable erzeugt, die den Rückgabe-
wert vorerst aufnimmt. Dies muss auch bei verschachtelten Funktionsaufrufen geschehen, wenn auch nur eine einzige der "inneren" Funktionen einen Wert
werfen kann.
Pro "catch"-Behandlungstyp, für welchen ein Name für dessen Wert und nicht nur der Typ angegebn wird, wird am Anfang der Funktion eine lokale 
Variable deklariert. Diese erhält den Wert der globalen Variable, falls ein Wert ihres Types geworfen wurde und etwas mit ihr gemacht wird.
Wird sie im Block nicht verwendet, kann auch ihre Deklaration weggelassen werden (Ausnahme).
Wurde keiner der speziell behandelten Typen geworfen, so werden die restlichen überprüft, falls ein "default"-Block exisitiert.
Wurde nichts geworfen, so erhalten die eigentlich gesetzten Variablen im else-Block schließlich den Wert der temporären Variablen.
ACHTUNG: Was passiert bei Werfungen bei der Initialisierung einer lokalen oder globalen Variable?

18. Finally
"finally"-Blöcke können Code enthalten, der unmittelbar bevor einer throw-, continue-, break- oder return-Anweisung einer Funktion oder Schleife bzw. am Ende eines try-Blocks ausgeführt werden soll.
Sie können daher mit sämtlichen lokalen Variablen arbeiten, jedoch gilt es auf den Inhalt dieser zu achten, da er dem zur Zeit der entsprechenden Anweisung
entspricht, welcher durchaus unterschiedlich sein kann.

Code:
integer max(integer a, integer b)
{
	if (a > b)
		return a;

	return b;

	finally
	{
		if (a == 10)
		{
			Print("Haha");
		}
	}
}

Generierter Code:
function max takes integer a, integer b returns integer
	if (a > b) then
		if (a == 10) then // Kopie des finally-Blocks
			call Print("Haha")
		endif
		return a
	endif

	if (a == 10) then // Kopie des finally-Blocks
		call Print("Haha")
	endif
	return b
endfunction

Code:
void test()
{
	integer i;
	
	for (i = 0; i < 100; i++)
	{
		Print("Iteration " + I2S(i));

		if (i == 2)
			continue;		

		if (i == 4)
			break;
	}
	case 10 // 10 mal durchlaufen
	{
	}
	default // Bis zum Schluss durchlaufen
	{
	}
	finally // Wird vor der break- und der continue-Anweisung ausgeführt.
	{
	}
} 
