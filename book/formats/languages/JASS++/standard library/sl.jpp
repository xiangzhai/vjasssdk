// Use same identifiers (there can be several versions of a function with same identifier.
// Use aliases like CreateSpecialEffect and aliases for BJs
scope jasspp
{
	scope jass.*;

	debug
	{
		public scope DebugApi
		{
			public integer allocateArrayInstance()
			public integer allocateClassInstance()
			public boolean freeArrayInstance(integer index)
			public boolean freeClassInstance(integer index)
			public boolean freeFunctionPrototype(integer index)

			// Test functions
			public void Echo(string message)
			public void Echo(integer value)
			public void Echo(real value)
			public void Echo(handle value)

			public void EchoGlobalHashTableInformation()
		}
	}

	// Scope uses types real, integer, location, rect and region (geometric)
	public scope MathApi
	{
		// conversion
		public function string I2A(integer value, string charPool);
		public function integer A2I(string value, string charPool);
		public function string I2Roman(integer value);
		public function string I2Binary(integer value);
		public function integer Binary2I(string value);
		public function string I2Octal(integer value);
		public function integer Octal2I(string value);
		public function string I2Hexadecimal(integer value);
		public function integer Hexadicmal2I(string value);

		// real
		public function real RoundTo(real base, real interval)
		public function real JumpParabola(real distance, real maxDistance, real curve)
		public function real ParabolaZ(real maxHeight, real distance, real x)
		public function real Log(real x, integer iterations)
		public function real Logarithm(real base, real x, integer iterations)
		public function real GetRandomFacing()

		// point
		public function real GetTerrainZ(real x, real y)
		public function real GetPointZ( real x, real y)
		public function real GetDistanceBetweenPoints takes real x0, real y0, real z0, real x1, real y1, real z1)
		public function location GetCentreBetweenPoints(real x0, real y0, real x1, real y1)
		public function real GetPolarProjectionX(real x, real angle, real distance)
		public function real GetPolarProjectionY(real Y, real angle, real distance)
		public function location GetPolarProjectionOfPoint(real x, real y, real angle, real distance)
		public function real GetAngleBetweenPoints(real x0, real y0, real x1, real y1)
		public function real GetAngleBetweenPointsFromCentre(real centreX, real centreY, real x0, real y0, real x1, real y1)


		// rect
		public function rect GetRectsBorderRect(rect rect1, rect rect2)
		public function rect RectFromPointSize(real x, real y, real width, real height)
		public function void SetRectByCoordinates(rect whichRect, real x1, real y1, real x2, real y2, real x3, real y3, real x4, real y4)
		public function group GetGroupInRectByCoordinates(real x1, real y1, real x2, real y2, real x3, real y3, real x4, real y4)

		// handle
		private template < T, function FunctionX, function FunctionY >
		{
			function real GetZ(T value);
			function real GetDistanceBetween(T value0, T value1, real z0, real z1)
			function location GetCentreBetween(T value0, T value1)
			function real GetPolarProjectionX(T value, real angle, real distance)
			function real GetPolarProjectionY(T value, real angle, real distance)
			function real GetAngleBetween(T value0, T value1)
			function rect RectFromSize(T value, real width, real height)
		}

		// widget
		// Create templates for types widget, unit, destructable and item.
		public alias GetWidgetZ ( GetZ<widget, GetWidgetX, GetWidgetY> );
		public alias GetDistanceBetweenWidgets ( GetDistanceBetween<widget, GetWidgetX, GetWidgetY> );
		public alias GetCentreBetweenWidgets ( GetCentreBetween<widget, GetWidgetX, GetWidgetY> );
		public alias GetWidgetPolarProjectionX ( GetPolarProjectionX<widget, GetWidgetX, GetWidgetY> );
		public alias GetWidgetPolarProjectionY ( GetPolarProjectionY<widget, GetWidgetX, GetWidgetY> );
		public alias GetAngleBetweenWidgets ( GetAngleBetween<unit, GetWidgetX, GetWidgetY> );
		public alias RectFromWidgetsSize ( RectFromSize<widget, GetWidgetX, GetWidgetY> );

		// unit
		public alias GetUnitZ ( GetZ<unit, GetUnitX, GetUnitY> );
		public alias GetDistanceBetweenUnits ( GetDistanceBetween<unit, GetUnitX, GetUnitY> );
		public alias GetCentreBetweenUnits ( GetCentreBetween<unit, GetUnitX, GetUnitY> );
		public alias GetUnitPolarProjectionX ( GetPolarProjectionX<unit, GetUnitX, GetUnitY> );
		public alias GetUnitPolarProjectionY ( GetPolarProjectionY<unit, GetUnitX, GetUnitY> );
		public alias GetAngleBetweenUnits ( GetAngleBetween<unit, GetUnitX, GetUnitY> );
		public alias RectFromUnitsSize ( RectFromSize<unit, GetUnitX, GetUnitY> );

		public function real GetDistanceBetweenUnitsWithZ(unit unit1, unit unit2)
		public function void SetUnitPolarProjectionPosition(unit whichUnit, real angle, real distance)
		public function void SetUnitZ(unit whichUnit, real z)
		public function boolean SetUnitXIfNotBlocked(unit whichUnit, real oldX, real oldY, real x)
		public function boolean SetUnitYIfNotBlocked(unit whichUnit, real oldX, real oldY, real y)
		public function boolean SetUnitXYIfNotBlocked(unit whichUnit, real oldX, real oldY, real x, real y)
		public function unit FindClosestUnit(group whichGroup, real x, real y)
		public function unit FindClosestUnit(group whichGroup, location whichLocation)
		public function unit FindClosestUnit(group whichGroup, rect whichRect)
		public function boolean IsUnitOnRect(unit whichUnit, rect whichRect)
		public function void SetUnitFacingToFaceUnit(unit whichUnit, unit target)
		public function void SetUnitFacingToFaceRect(unit whichUnit, rect whichRect, real duration)
		public function void SetUnitPosition(unit whichUnit, rect whichRect)
		public function void SetUnitPosition(unit whichUnit, rect whichRect, real facing)
		public function void SetUnitToRandomPointOfRect(unit whichUnit, rect whichRect)
		/// Uses rect center.
		public function boolean IssueRectOrder(unit whichUnit, string order, rect whichRect)
		public function boolean IssueRectOrderById(unit whichUnit, integer order, rect whichRect)

		public alias IssueOrder
		(
			IssueRectOrder,
			IssueRectOrder,

			IssueImmediateOrder, //takes unit whichUnit, string order returns boolean
			IssueImmediateOrderById, //takes unit whichUnit, integer order returns boolean
			IssuePointOrder, //takes unit whichUnit, string order, real x, real y returns boolean
			IssuePointOrderLoc, //takes unit whichUnit, string order, location whichLocation returns boolean
			IssuePointOrderById, //takes unit whichUnit, integer order, real x, real y returns boolean
			IssuePointOrderByIdLoc, //takes unit whichUnit, integer order, location whichLocation returns boolean
			IssueTargetOrder, //takes unit whichUnit, string order, widget targetWidget returns boolean
			IssueTargetOrderById, //takes unit whichUnit, integer order, widget targetWidget returns boolean
			IssueInstantPointOrder, //takes unit whichUnit, string order, real x, real y, widget instantTargetWidget returns boolean
			IssueInstantPointOrderById, //takes unit whichUnit, integer order, real x, real y, widget instantTargetWidget returns boolean
			IssueInstantTargetOrder, //takes unit whichUnit, string order, widget targetWidget, widget instantTargetWidget returns boolean
			IssueInstantTargetOrderById, //takes unit whichUnit, integer order, widget targetWidget, widget instantTargetWidget returns boolean
			IssueBuildOrder, //takes unit whichPeon, string unitToBuild, real x, real y returns boolean
			IssueBuildOrderById, //takes unit whichPeon, integer unitId, real x, real y returns boolean

			IssueNeutralImmediateOrder, //takes player forWhichPlayer, unit neutralStructure, string unitToBuild returns boolean
			IssueNeutralImmediateOrderById, //takes player forWhichPlayer,unit neutralStructure, integer unitId returns boolean
			IssueNeutralPointOrder, //takes player forWhichPlayer,unit neutralStructure, string unitToBuild, real x, real y returns boolean
			IssueNeutralPointOrderById, //takes player forWhichPlayer,unit neutralStructure, integer unitId, real x, real y returns boolean
			IssueNeutralTargetOrder, //takes player forWhichPlayer,unit neutralStructure, string unitToBuild, widget target returns boolean
			IssueNeutralTargetOrderById //takes player forWhichPlayer,unit neutralStructure, integer unitId, widget target returns boolean
		);

		// item
		public alias GetItemZ ( GetZ<item, GetItemX, GetItemY> );
		public alias GetDistanceBetweenItems ( GetDistanceBetween<item, GetItemX, GetItemY> );
		public alias GetCentreBetweenItems ( GetCentreBetween<item, GetItemX, GetItemY> );
		public alias GetItemPolarProjectionX ( GetPolarProjectionX<item, GetItemX, GetItemY> );
		public alias GetItemPolarProjectionY ( GetPolarProjectionY<item, GetItemX, GetItemY> );
		public alias GetAngleBetweenItems ( GetAngleBetween<item, GetItemX, GetItemY> );
		public alias RectFromItemsSize ( RectFromSize<item, GetItemX, GetItemY> );

		public function void SetItemPolarProjectionPosition(item whichItem, real angle, real distance)

		// destructable


		// location
		public alias GetDistanceBetweenLocations ( GetDistanceBetween<location, GetLocationX, GetLocationY> );
		public alias GetCentreBetweenLocations ( GetCentreBetweenLocations<location, GetLocationX, GetLocationY> );
		public alias GetAngleBetweenLocationsFromCentre ( GetAngleBetween<location, GetLocationX, GetLocationY> );

		public class Vector2
		{
			public void x(real x)
			public real x() const
			public void y(real y)
			public real y() const
		};

		public alias Location ( Vector2 );

		public class Vector3
		{
			public void x(real x)
			public real x() const
			public void y(real y)
			public real y() const
			public void z(real z)
			public real z() const
		};

		public alias Vertex ( Vector3 );

		public class Circle : public Vector3
		{
			public real radius() const
		};

		public class Matrix
	}

	public scope StringApi
	{
		public boolean StringIsAscii(string value)
		public boolean StringIsBinary(string value)
		public boolean StringIsOctal(string value)
		public boolean StringIsDecimal(string value)
		public boolean StringIsHexadecimal(string value)
		public boolean StringIsAlphabetical(string value)
		public boolean StringIsNumeral(string value)
		public boolean StringIsSpecial(string value)
		public boolean StringIsWhiteSpace(string value)
		public boolean StringIsSignature(string value)
		public boolean StringIsInteger(string value)
		public boolean StringIsReal(string value)
		public boolean StringIsBoolean(string value)

		public integer StringFind(string value, integer startOffset = 0)
		public string StringReverse(string value, integer startOffset = 0)
		public string StringReplace(string value, string oldValue, string newValue = "")
		public string StringRemove(string value, string oldValue)
		public string StringInsert(string value, string newValue, integer position = 0)
		public string StringAppend(string value, string newValue)
		public string StringMove(string value, string movedValue, integer position = 0)
		public boolean StringMatch(string value, string otherValue)
		public boolean StringMatchRegEx(string value, string otherValue, string regEx)

		public string StringRegEx(string value, string regEx)

		public string StringModifiedPlayerName(player whichPlayer, boolean showColor = true, boolean showNumber = true)
		public string StringBar(real value, real maxValue, integer length, string colour, string barCharacter = "|")
	}

	public scope UnitApi
	{
		public function boolean UnitMoveItemToSlot(unit whichUnit, item whichItem, integer slot)
		public function boolean UnitUseItemOfSlot(unit whichUnit, integer slot)
		public function boolean UnitUseItemOfSlotOnTarget(unit whichUnit, integer slot, widget target)
		public function boolean UnitUseItemOfSlotOnPoint(unit whichUnit, integer slot, real x, real y)
		public function boolean UnitDropSlot(unit whichUnit, integer slot, integer newSlot)
		public function real GetUnitMissingLife(unit whichUnit)
		public function real GetUnitMissingLifePercent(unit whichUnit)
		public function real GetUnitMissingMana(unit whichUnit)
		public function real GetUnitMissingManaPercent(unit whichUnit)
		public function unit CopyUnit(unit whichUnit, real x, real y, real facing, integer stateMethod)

		public function unit CreateUnitAtRect(player whichPlayer, integer unitTypeId, rect whichRect, real facing)
		public function unit CreateCorpseAtRect(player whichPlayer, integer unitTypeId, rect whichRect, real facing)
		public function void PauseAllUnits(boolean pause)
		public function integer GetHeroStrBonus(unit hero)
		public function integer GetHeroAgiBonus(unit hero)
		public function integer GetHeroIntBonus(unit hero)

		public function void MakeUnitMovable(unit whichUnit, boolean movable)
		public function void MakeUnitFlyable(unit whichUnit)
		public function void MakeUnitAttackable(unit whichUnit, boolean attackable)
		public function boolean IsUnitInvulnerable(unit const whichUnit)
		public function integer GetUnitAlliance(unit const whichUnit, unit otherUnit)
	}

	public scope GroupApi
	{
		public function group CreateUnitsAtPoint(integer count, integer unitTypeId, player whichPlayer, real x, real y, real face)
		public function group CreateUnitsAtRect(integer count, integer unitTypeId, player whichPlayer, rect whichRect, real face)
		public function group CreateCorpsesAtPoint(integer count, integer unitTypeId, player whichPlayer, real x, real y, real face)

		public function unit FirstOfGroupEx(group whichGroup)
	}

	public scope MiscApi
	{
		public function boolean IsInGame()
		public function boolean IsInGameEx()
		public function item CopyItem(item whichItem, real x, real y)
		public function string GetItemTypeIdName(integer itemTypeId)
		public function boolean IsPlayerPlayingUser(player whichPlayer)
		public function integer CountPlayingPlayers()
		public function integer CountPlayingUsers()
	}

	public scope EnvironmentApi
	{
		public function boolean IsDestructableDead(destructable const whichDestructable)
		public function boolean IsDestructableTree(destructable const whichDestructable)
		public function boolean TreeFilter()

		public function lightning CreateLightning(player const whichPlayer, string whichCode, real x0, real y0, real z0, real x1, real y1, real z1)
		public function lightning CreateLightning(force const whichForce, string whichCode, real x0, real y0, real z0, real x1, real y1, real z1)
		public function lightning CreateLightning(location const location0, location const location1)
		public function lightning CreateLightning(player const whichPlayer, location const location0, location const location1)
		public function lightning CreateLightning(force const whichForce, location const location0, location const location1)

		public function void PlaySound(player const whichPlayer, sound const whichSound)
		public function void PlaySound(string filePath)
		public function void PlaySound(string filePath, real x, real y, real z)
		public function void PlaySound(string filePath, unit const whichUnit)

		public function void PlaySound(player whichPlayer, string filePath)
		public function void PlaySound(player whichPlayer, string filePath, real x, real y, real z)

		public function void PreloadSoundFile(string filePath)

		public function effect AddSpecialEffect(player whichPlayer, string modelPath, real x, real y)
		public function effect AddSpecialEffect(player whichPlayer, string modelPath, widget target, string attachPoint)

		public alias AddSpecialEffect CreateSpecialEffect;

		public function void ResetTerrainFog(player whichPlayer)

		public function void SetTerrainSpacePathable(real x, real y, pathingtype pathingType, boolean flag)
		public function boolean IsTerrainDeepWater(real x, real y)
		public function boolean IsTerrainShallowWater(real x, real y)
		public function boolean IsTerrainLand(real x, real y)
		public function boolean IsTerrainPlatform(real x, real y)
		public function boolean IsTerrainWalkable(real x, real y, real maxRange)

		public function integer GetTimeOfDayElapsedHours()
		public function integer GetTimeOfDayRemainingHours()
		public function integer GetTimeOfDayElapsedMinutes()
		public function integer GetTimeOfDayRemainingMinutes()
		public function integer GetTimeOfDayElapsedMinutesInHour()
		public function integer GetTimeOfDayRemainingMinutesInHour()
		public function integer GetTimeOfDayElapsedSeconds()
		public function integer GetTimeOfDayRemainingSeconds()
		public function integer GetTimeOfDayElapsedSecondsInHour()
		public function integer GetTimeOfDayRemainingSecondsInHour()
		public function integer GetTimeOfDayElapsedSecondsInMinute()
		public function integer GetTimeOfDayRemainingSecondsInMinute()
		/**
		* @return Returns string with localized time format.
		*/
		public function string GetTimeOfDayString()

		public class TimeOfDay
		{
			public static function integer hours() const;
			public static function integer minutes() const;
			public static function integer seconds() const;
		};

		public class DamageRecorder
		public class DynamicLightning
		public class Jump
		public class Missile
	}

	public scope InterfaceApi
	{
		public void CreateImageForPlayer(player whichPlayer, string file, real x, real y, real z, real sizeX, real sizeY)
		public void ShowImageToPlayer(player whichPlayer, image whichImage, boolean show)

		public void LeaderboardDisplayToPlayer(player whichPlayer, leaderboard whichLeaderboard, boolean show)

		public void MultiboardDisplayToPlayer(player whichPlayer, multiboard whichMultiboard, boolean show)
		public void MultiboardSuppressDisplayForPlayer(player whichPlayer, boolean flag)

		public void PingMinimapExForPlayer(player whichPlayer, real x, real y, real duration, real red, real green, real blue, boolean extraEffect)

		public void PanCameraToUnitTimedWithZ(unit whichUnit, real duration)
		public void RotateCameraAroundPointForPlayer(player whichPlayer, real x, real y, real degrees, real duration)
		public void SmartCameraPanWithZForPlayer(player whichPlayer, real x, real y, real zOffset, real duration)
		public void SmartCameraPanForPlayer(player whichPlayer, real x, real y, real duration)
		public void SmartCameraPan(real x, real y, real duration)

		public void ShowGenericCinematicFilterToPlayer(player whichPlayer, real duration, blendmode blendMode, string texture, real red0, real green0, real blue0, real transparency0, real red1, real green1, real blue1, real transparency1)
		public void ShowBlackScreenCinematicFilterToPlayer(player whichPlayer, real duration)
		public void ShowBlackScreenCinematicFilter(real duration)

		public trackable CreateTrackableForPlayer(player whichPlayer, string modelPath, real x, real y, real facingAngle)
		public trackable CreateTrackableForPlayerZ(player whichPlayer, string modelPath, real x, real y, real z, real facingAngle)

		public boolean IsPlayerSelectionEmpty(player whichPlayer)
		public unit GetFirstSelectedUnitOfPlayer(player whichPlayer)
		public void MakeUnitSelectable(unit whichUnit, boolean selectable)

		template<T = real>
		public abstract class Bar
		{
			public void value(T value);
			public T const value() const
			public void maxValue(T maxValue);
			public T const maxValue() const
			public integer const percentage() const

			public abstract virtual refresh()
			public abstract virtual enable()
			public abstract virtual disable()
			public abstract virtual show()
			public abstract virtual hide()
		};

		template<T = real>
		public class MultiboardBar (public class Bar<T>)
		{
		};

		/**
		* Health is real.
		*/
		public class MultiboardWidgetHealthBar (public MultiboardBar)
		{
			public widget const object() const;
		};
		/**
		* States are real.
		*/
		public class MultiboardUnitStateBar (public MultiboardBar)
		{
			public unit const object() const;
			public unitstate state() const;
		};

		public abstract class Selection
		{
			public abstract store();
			public abstract restore();
		};

		/**
		* Stores player selection.
		*/
		public class PlayerSelection (public Selection)
		/**
		* Stores force selection.
		*/
		public class ForceSelection (public Selection)

		// Streitmachtbasierter Dialog, auch in gemeinsamer Kontrolle anwendbar!
		public class ForceDialog
	}

	/**
	* Package for better internationalisation support.
	* String literals can have special expressions which will be replaced by arguments of formatting functions if
	* you call them by passing the string literal.
	*/
	public scope FormatApi
	{
		public Format Format(string value)
		{
			return Format.new(value);
		}

		public string String(Format value)
		{
			return string(value);
		}

		public class Format
		{
			private new ()
			{
			}

			private new (string value)
			{
				this.m_value = value;
			}

			public string value() const
			{
				return this.m_value;
			}

			/**
			* Appends a string argument.
			*/
			public void a(string whichString)
			public void a(handle whichHandle)
			public void a(unit whichUnit)
			public void a(item whichItem)
			public void a(destructable whichDestructable)

			/**
			* Deletes the object and returns the formatted string.
			*/
			public string operator string ()
			{
				string result = this.m_value;
				delete this;

				return result;
			}

			private string m_value;
		};
	}

	public scope RpgApi
	{
		public class UnitCamera
		{
		};

		public class UnitRucksackItemData
		{
			public integer page() const;
			public integer slot() const;

			public integer charges() const;
			public integer itemType() const;
			public boolean invulnerable() const;
			public boolean hidden() const;
		};

		// Verwendet das Standard-Warcraft-Inventar um eine seitenbasierte Ausrüstung und einen seitenbasierten Rucksack zur Verfügung zu stellen.
		// Der unterschied zwischen Ausrüstung und Rucksack besteht darin, dass Ausrüstungsgegenstände stets eine Wirkung auf den Träger haben.
		public class UnitRucksack
		{
			public unit const whichUnit() const;

			public void pages(integer pages);
			public integer pages() const;

			public boolean addItem(item whichItem);
			public boolean addItem(item const whichItem);
			/**
			* @return Returns items as 2-dimensional array with first dimension used for page and second dimension used for slot.
			*/
			public UnitRucksackItemData[][] const containedItems() const;
			public UnitRucksackItemData const containedItem(integer page, integer slot) const;

			public boolean changePage(integer page);
			public void show();
			public void hide();
			public boolean isShown() const;
		};
	}

	public class VideoApi
	{
		public native abstract class Actor
		{
			public abstract threaded void store();
			public abstract threaded void restore();
		};

		public alias actor (class Actor);

		public native class UnitActor : public Actor
		{
			public new (unit storedUnit);
			public delete { };

			public threaded void store();
			public threaded void restore();

			public unit const storedUnit();
			public unit const actorUnit();
		};

		public alias unitactor (class UnitActor);

		public native class DestructableActor : public Actor
		{
			public new (destructable storedDestructable)
			public delete { };

			public threaded void store();
			public threaded void restore();

			public destructable storedDestructable();
			public destructable actorDestructable();
		};

		public alias destructableactor (class DestructableActor);


		public native class Video
		{
			public new(force whichForce);
			public threaded delete;

			protected virtual threaded void setup()
			protected virtual threaded void play()
			protected virtual threaded void stop()
			protected virtual threaded void skip()

			private force m_players;
			private List<class Actor> m_actors;
		};
	}

	public scope ContainerApi
	{
		template < Type >
		public abstract function UnaryPredicate bool (Type const);

		template < Type1, Type2 >
		public abstract function BinaryPredicate bool (Type1 const, Type2 const);

		template < Type >
		public abstract function Generator void (Type const);

		template < class ContainerType >
		public abstract class ContainerIterator
		{
			private friend class ContainerType;

			public abstract self operator ++();
			public abstract self operator --();
		};

		template < ElementType, ContainerIteratorType, ConstantContainerIteratorType, ReverseContainerIteratorType, ConstantReverseContainerIteratorType >
		public abstract class Container
		{
			public abstract integer operator size() const;
			public abstract ElementType const operator [](integer index) const;

			public abstract void clear() const;
			public abstract boolean isEmpty() const;
			public abstract ElementType random();
			// Verwendet die nativen Zufallsfunktionen von JASS, daher für alle Container.
			public abstract ElementType const random() const;

			public abstract ContainerIteratorType begin();
			public abstract ConstantContainerIteratorType begin() const;
			public abstract ReverseContainerIteratorType rBegin();
			public abstract ConstantReverseContainerIteratorType rBegin() const;
			public abstract ContainerIteratorType end();
			public abstract ConstantContainerIteratorType end() const;
			public abstract ReverseContainerIteratorType rEnd();
			public abstract ConstantReverseContainerIteratorType rEnd() const;
		};

		public class List (public Container)
		public class Vector (public Container)
		public class Map (public Container)
		public class Bitset (public Container)
	}

	/**
	* @todo How to call slots?
	*/
	public scope SignalApi
	{
		template < abstract function SlotFunctionType = abstract function void () >
		public class Signal
		{
			public alias SlotFunction (SlotFunctionType);

			/**
			* Calls all registered slots.
			*/
			public void emit()
			public void addSlot(self.SlotFunction slot)
			public void removeSlot(self.SlotFunction slot)
		};
	};
}